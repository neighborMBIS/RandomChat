// Java Chatting Server

import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Random;
import java.util.StringTokenizer;
import java.util.Vector;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.border.EmptyBorder;

public class Server extends JFrame {
	static int tCnt = 0; // 占쏙옙 占싸울옙占쏙옙
	static int mCnt = 0; // 占쏙옙占쏙옙 占쏙옙 占싸울옙占쏙옙
	static int fCnt = 0; // 占쏙옙占쏙옙 占쏙옙 占싸울옙占쏙옙
	static int sumCnt = 0; // 占쏙옙 占싸울옙占쏙옙
	static int bigger = 0; //占싯삼옙占쏙옙占쏙옙 占쏙옙占쏙옙, 占쏙옙占쌘듸옙 占쏙옙 큰占쏙옙
	static int match = 0; 
	static int roomCnt = 0; //占쏙옙占싫�
	int myIndex = 0; // 占쏙옙占쏙옙 占쏙옙占쏙옙占� 占싸듸옙占쏙옙
	int yourIndex = 0; // 占쌨댐옙 占쏙옙占쏙옙占� 占싸듸옙占쏙옙
	
	int mRandom[] = new int[100]; 
	int fRandom[] = new int[100]; 
	Random random; 
	
	String sender;
	String receiver;

	Vector<String> totalId = new Vector<String>(); // 占쏙옙체 id 占쏙옙占쏙옙

	Vector<String> mId = new Vector<String>(); // 占쏙옙占쏙옙 id 占쏙옙占쏙옙
	Vector<String> fId = new Vector<String>(); // 占쏙옙占쏙옙 id 占쏙옙占쏙옙

	ArrayList<String> mIdSearch = new ArrayList<String>();
	ArrayList<String> fIdSearch = new ArrayList<String>();
	
	int[] mState = new int[100];  //占쏙옙占쏙옙 占쏙옙占쏙옙 0-占썩본 1-占쏙옙칭占쏙옙 2-占쏙옙화占쏙옙
	int[] fState = new int[100];
	
	private JPanel contentPane;
	private JTextField textField; // 占쏙옙占쏙옙占� PORT占쏙옙호 占쌉뤄옙
	private JButton Start; // 占쏙옙占쏙옙占쏙옙 占쏙옙占쏙옙占신� 占쏙옙튼
	JTextArea textArea; // 클占쏙옙占싱억옙트 占쏙옙 占쏙옙占쏙옙 占쌨쏙옙占쏙옙 占쏙옙占�

	private ServerSocket socket; // 占쏙옙占쏙옙占쏙옙占쏙옙
	private Socket soc; // 占쏙옙占쏙옙占쏙옙占�
	private int Port; // 占쏙옙트占쏙옙호

	private Vector vc = new Vector(); // 占쏙옙占쏙옙占� 占쏙옙占쏙옙美占� 占쏙옙占쏙옙占쏙옙 占쏙옙占쏙옙

	public static void main(String[] args) {
		
		Server frame = new Server();
		frame.setVisible(true);
	}

	public Server() {

		init();

	}

	private void init() { // GUI占쏙옙 占쏙옙占쏙옙占싹댐옙 占쌨소듸옙

		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 280, 400);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);

		JScrollPane js = new JScrollPane();

		textArea = new JTextArea();
		textArea.setColumns(20);
		textArea.setRows(5);
		js.setBounds(0, 0, 264, 254);
		contentPane.add(js);
		js.setViewportView(textArea);

		textField = new JTextField();
		textField.setBounds(98, 264, 154, 37);
		contentPane.add(textField);
		textField.setColumns(10);
		textField.setText("4444");
	
		JLabel lblNewLabel = new JLabel("Port Number");
		lblNewLabel.setBounds(12, 264, 98, 37);
		contentPane.add(lblNewLabel);
		Start = new JButton("占쏙옙占쏙옙 占쏙옙占쏙옙");
		Myaction action = new Myaction();
		Start.addActionListener(action); // 占쏙옙占쏙옙클占쏙옙占쏙옙占쏙옙 占쌓쇽옙 占쏙옙占쏙옙占십몌옙 占쏙옙達占쏙옙占� 클占쏙옙占쏙옙占쏙옙
		textField.addActionListener(action);
		Start.setBounds(0, 325, 264, 37);
		contentPane.add(Start);
		textArea.setEditable(false); // textArea占쏙옙 占쏙옙占쏙옙微占� 占쏙옙占쏙옙 占쏙옙占싹게뀐옙 占쏙옙占승댐옙.
	}

	class Myaction implements ActionListener // 占쏙옙占쏙옙클占쏙옙占쏙옙占쏙옙 占쌓쇽옙 占싱븝옙트 처占쏙옙 클占쏙옙占쏙옙
	{
		@Override
		public void actionPerformed(ActionEvent e) {

			// 占쌓쇽옙 占싱븝옙트占쏙옙 sendBtn占싹띰옙 占실댐옙 textField 占쏙옙占쏙옙 Enter key 치占쏙옙
			if (e.getSource() == Start || e.getSource() == textField) {
				if (textField.getText().equals("") || textField.getText().length() == 0)// textField占쏙옙
																						// 占쏙옙占쏙옙
																						// 占쏙옙占쏙옙占쏙옙占�
																						// 占쏙옙占쏙옙占쏙옙
				{
					textField.setText("占쏙옙트占쏙옙호占쏙옙 占쌉뤄옙占쏙옙占쌍쇽옙占쏙옙");
					textField.requestFocus(); // 占쏙옙커占쏙옙占쏙옙 占쌕쏙옙 textField占쏙옙 占쌍억옙占쌔댐옙
				} else {
					try {
						Port = Integer.parseInt(textField.getText()); // 占쏙옙占쌘뤄옙
																		// 占쌉뤄옙占쏙옙占쏙옙
																		// 占쏙옙占쏙옙占쏙옙
																		// 占쏙옙占쏙옙 占쌩삼옙
																		// 占쏙옙트占쏙옙
																		// 占쏙옙占쏙옙
																		// 占쏙옙占쏙옙.
						server_start(); // 占쏙옙占쏙옙微占� 占쏙옙占쏙옙琯占� 占쏙옙트占쏙옙호占쏙옙 占쌍억옙占쏙옙占쏙옙 占쏙옙占쏙옙 占쏙옙占쏙옙占쏙옙占쏙옙占쏙옙 占쌨소듸옙 호占쏙옙
					} catch (Exception er) {
						// 占쏙옙占쏙옙微占� 占쏙옙占쌘뤄옙 占쌉뤄옙占쏙옙占쏙옙 占십억옙占쏙옙占시울옙占쏙옙 占쏙옙占쌉뤄옙占쏙옙 占썰구占싼댐옙
						textField.setText("占쏙옙占쌘뤄옙 占쌉뤄옙占쏙옙占쌍쇽옙占쏙옙");
						textField.requestFocus(); // 占쏙옙커占쏙옙占쏙옙 占쌕쏙옙 textField占쏙옙 占쌍억옙占쌔댐옙
					}
				} // else 占쏙옙 占쏙옙
			}

		}

	}

	private void server_start() {
		try {
			socket = new ServerSocket(Port); // 占쏙옙占쏙옙占쏙옙 占쏙옙트 占쏙옙占승부븝옙
			Start.setText("占쏙옙占쏙옙占쏙옙占쏙옙占쏙옙");
			Start.setEnabled(false); // 占쏙옙占쏙옙占쏙옙 占쏙옙占싱삼옙 占쏙옙占쏙옙占신곤옙占� 占쏙옙 占싹곤옙 占쏙옙占승댐옙
			textField.setEnabled(false); // 占쏙옙占싱삼옙 占쏙옙트占쏙옙호 占쏙옙占쏙옙占쏙옙 占싹곤옙 占쏙옙占승댐옙

			if (socket != null) // socket 占쏙옙 占쏙옙占쏙옙占쏙옙占쏙옙占쏙옙 占쏙옙占쏙옙占쏙옙占쏙옙
			{
				Connection();
			}

		} catch (IOException e) {
			textArea.append("占쏙옙占쏙옙占쏙옙 占싱뱄옙 占쏙옙占쏙옙占쏙옙都求占�...\n");

		}
	}

	private void Connection() {
		Thread th = new Thread(new Runnable() { // 占쏙옙占쏙옙占� 占쏙옙占쏙옙占쏙옙 占쏙옙占쏙옙 占쏙옙占쏙옙占쏙옙
			@Override
			public void run() {
				while (true) { // 占쏙옙占쏙옙占� 占쏙옙占쏙옙占쏙옙 占쏙옙占쏙옙漫占� 占쌨깍옙 占쏙옙占쏙옙 while占쏙옙
					try {
						textArea.append("占쏙옙占쏙옙占� 占쏙옙占쏙옙 占쏙옙占쏙옙占�...\n");
						soc = socket.accept(); // accept占쏙옙 占싹어나占쏙옙 占쏙옙占쏙옙占쏙옙占쏙옙 占쏙옙占쏙옙 占쏙옙占쏙옙占�
						textArea.append("占쏙옙占쏙옙占� 占쏙옙占쏙옙!!\n");
						UserInfo user = new UserInfo(soc, vc); // 占쏙옙占쏙옙占� 占쏙옙占쏙옙 占쏙옙占쏙옙占쏙옙 占쌥뱄옙
																// 占쏙옙占쏙옙占쏙옙퓐占�, user
																// 클占쏙옙占쏙옙 占쏙옙占승뤄옙 占쏙옙체 占쏙옙占쏙옙
						// 占신곤옙占쏙옙占쏙옙占쏙옙 占쏙옙占쏙옙 占쏙옙占쏙옙占� 占쏙옙占싹곤옙, 占쏙옙占싶몌옙 占쏙옙틉畇占�
						vc.add(user); // 占쌔댐옙 占쏙옙占싶울옙 占쏙옙占쏙옙占� 占쏙옙체占쏙옙 占쌩곤옙
						user.start(); // 占쏙옙占쏙옙 占쏙옙체占쏙옙 占쏙옙占쏙옙占쏙옙 占쏙옙占쏙옙
					} catch (IOException e) {
						
						textArea.append("!!!! accept 占쏙옙占쏙옙 占쌩삼옙... !!!!\n");
					}
				}
			}
		});
		th.start();
	}

	class UserInfo extends Thread {
		private InputStream is;
		private OutputStream os;
		private DataInputStream dis;
		private DataOutputStream dos;
		private Socket user_socket;
		private Vector user_vc;
		private String Nickname = "";

		public UserInfo(Socket soc, Vector vc) // 占쏙옙占쏙옙占쌘메소듸옙
		{
			// 占신곤옙占쏙옙占쏙옙占쏙옙 占싼억옙占� 占쌘뤄옙 占쏙옙占쏙옙
			this.user_socket = soc;
			this.user_vc = vc;

			User_network();
		}

		public void User_network() {
			try {
				is = user_socket.getInputStream();
				dis = new DataInputStream(is);
				os = user_socket.getOutputStream();
				dos = new DataOutputStream(os);

				// Nickname = dis.readUTF(); // 占쏙옙占쏙옙占쏙옙占� 占싻놂옙占쏙옙 占쌨는부븝옙
				byte[] b = new byte[1024];
				dis.read(b);

				String sMessage;
				String gender = new String(b);
				gender = gender.trim();
				System.out.println("처占쏙옙" + gender);

	
				if (gender.equals("male")) {
					System.out.println("占쏙옙占쏙옙 占쏙옙占�");
					mId.addElement("m" + mCnt); // add占쏙옙 boolean 占쏙옙占싹곤옙, addElement占쏙옙
												// 占쏙옙占싹곤옙占쏙옙占쏙옙
					mState[mCnt] = 0;
					textArea.append("ID " + mId.elementAt(mCnt) + " 占쏙옙占쏙옙\n");
					textArea.setCaretPosition(textArea.getText().length()); // 커占쏙옙
																			// 占쏙옙치
																			// 처占쏙옙占쏙옙占쏙옙?
					sMessage = "DEFINE-" + mId.elementAt(mCnt);
					send_Message(sMessage); // 占쏙옙占쏙옙占� 占쏙옙占쏙옙悶占쏙옙占� 占쏙옙占쏙옙占쏙옙占쏙옙占쏙옙 占싯몌옙
					System.out.println(mId.elementAt(mCnt) + "占쏙옙占쏙옙占쏙옙占�" + mCnt + "占쏙옙째 占쏙옙臼狗占�");
					
					totalId.addElement("m" + mCnt);
					mCnt++;
					tCnt++;
				}

				else if (gender.equals("female")) {
					System.out.println("占쏙옙占쏙옙 占쏙옙占�");
					fId.addElement("f" + fCnt); // add占쏙옙 boolean 占쏙옙占싹곤옙, addElement占쏙옙
												// 占쏙옙占싹곤옙占쏙옙占쏙옙
					fState[fCnt] = 0;
					textArea.append("ID " + fId.elementAt(fCnt) + " 占쏙옙占쏙옙\n");
					textArea.setCaretPosition(textArea.getText().length()); // 커占쏙옙
																			// 占쏙옙치
																			// 처占쏙옙占쏙옙占쏙옙?
					sMessage = "DEFINE-" + fId.elementAt(fCnt);
					send_Message(sMessage); // 占쏙옙占쏙옙占� 占쏙옙占쏙옙悶占쏙옙占� 占쏙옙占쏙옙占쏙옙占쏙옙占쏙옙 占싯몌옙
					System.out.println(fId.elementAt(fCnt) + "占쏙옙占쏙옙占쏙옙占�" + fCnt + "占쏙옙째 占쏙옙臼狗占�");
					totalId.addElement("f" + fCnt);
					fCnt++;
					tCnt++;
				}

			} catch (Exception e) {
				textArea.append("占쏙옙트占쏙옙 占쏙옙占쏙옙 占쏙옙占쏙옙\n");
				textArea.setCaretPosition(textArea.getText().length());
			}
				
		}
			
		public synchronized void InMessage(String str) {
			/*str = str.trim();*/

			String sMessage;
			String[] receive;

			receive = str.split("-");
			

			// 占쏙옙占쏙옙占� 占쌨쇽옙占쏙옙 처占쏙옙
			if (receive[0].equals("start")) {
				sender = receive[1];

				System.out.println("占쌓쏙옙트2-0 start 占쏙옙 占쏙옙占�" + sender);
				
				if(sender.contains("m")) {
					System.out.println("占쌓쏙옙트2-1 sender占쏙옙 " +sender);  
					mIdSearch.add(sender);
					System.out.println("++++++++++++++++++" + mIdSearch.size());
					for(int i=0; i<mCnt; i++)
						if(mId.contains(sender)) {
							mState[i] = 1;
							System.out.println("占쌓쏙옙트3-1 mId"+mState[i]);
							/*System.out.println("占쌓쏙옙트3-2 mId "+i+"占쏙옙째占쏙옙占�"+mIdSearch.get(i));*/
						}
				}
				
				else if(sender.contains("f")) {
					System.out.println("占쌓쏙옙트2-1 sender占쏙옙 " +sender);  
					fIdSearch.add(sender);
					System.out.println("-------------------" + fIdSearch.size());
					for(int i=0; i<fCnt; i++)
						if(fId.contains(sender)) {
							fState[i] = 1;
							System.out.println("占쌓쏙옙트3-1 占쏙옙占쏙옙 "+fState[i]);
							/*System.out.println("占쌓쏙옙트3-2 fId"+i+"占쏙옙째占쏙옙占�"+fIdSearch.get(i));*/
						}
				}
				System.out.println("占쌓쏙옙트4-1 占싯삼옙占쏙옙占쏙옙 占쏙옙占쏙옙" + mIdSearch.size());
				System.out.println("占쌓쏙옙트4-2 占싯삼옙占쏙옙占쏙옙 占쏙옙占쏙옙" + fIdSearch.size());
				//match 占쏙옙占쏙옙 占쏙옙占쏙옙
				//占쏙옙占썩가 占승놂옙
				if(mIdSearch.size() < fIdSearch.size())
					match = mIdSearch.size();
					
				else
					match = fIdSearch.size();
					
				System.out.println("match 占쏙옙占쏙옙 =" +match);
				random = new Random();
				
				for(int i=roomCnt; i<match; i++) {
					mRandom[i] = random.nextInt(match-roomCnt)+roomCnt;
					System.out.println("占쌓쏙옙트5-0" + mRandom[i]);
					for(int j=roomCnt; j<i; j++) {
						if(mRandom[i] == mRandom[j]) {
							i = i-1;
							break;
						}
					}
					System.out.println("占쌓쏙옙트5-1 " + "mrandom " + i +"占싸듸옙占쏙옙 " + mRandom[i]);
				}
				
				for(int i=roomCnt; i<match; i++) {
					fRandom[i] = random.nextInt(match-roomCnt)+roomCnt;
					System.out.println("占쌓쏙옙트5-0" + fRandom[i]);
					for(int j=roomCnt; j<i; j++) {
						if(fRandom[i] == fRandom[j]) {
							i = i-1;
							break;
						}
					}
					System.out.println("占쌓쏙옙트5-2 " + "frandom " + i +"占싸듸옙占쏙옙 " + fRandom[i]);
				}
				
				System.out.println("占쌓쏙옙트6 match 占쏙옙占쏙옙" +match + "roomCnt 占쏙옙占쏙옙" + roomCnt);
					 
				//占싯삼옙占쌩울옙占쏙옙 sender占쏙옙 占쏙옙占쏙옙占싹띰옙 
				for(int i=roomCnt; i<match; i++) {
					sender = mIdSearch.get(mRandom[i]);
					receiver = fIdSearch.get(fRandom[i]);
					System.out.println("占쌓쏙옙트7-1" + "占싯삼옙占쏙옙占쏙옙 sender占쏙옙占쏙옙 " + mRandom[i] + "==" + sender);
					System.out.println("占쌓쏙옙트7-2" + "占싯삼옙占쏙옙占쏙옙 receiver占쏙옙占쏙옙 " +fRandom[i] + "==" + receiver);
					str = "IN-" + sender + "-" + receiver;
					System.out.println("占쌓쏙옙트7-3 "+ str);
					System.out.println("占쌓쏙옙트7-4 "+ mCnt);
					for(int j=0; j<tCnt; j++) {
						if(totalId.elementAt(j).equals(sender)) { 
							System.out.println("占쌓쏙옙트7-5" + str + "占싸듸옙占쏙옙" +j);
							broad_cast(str, j);
						}
					}
				}
				
				//占싯삼옙占쌩울옙占쏙옙 sender占쏙옙 占쏙옙占쏙옙占싹띰옙 
				for(int i=roomCnt; i<match; i++) {
					sender = fIdSearch.get(fRandom[i]);
					receiver = mIdSearch.get(mRandom[i]);
					System.out.println("占쌓쏙옙트8-1 " + "占싯삼옙占쏙옙占쏙옙 sender占쏙옙占쏙옙" + fRandom[i] + "==" + sender);
					System.out.println("占쌓쏙옙트8-2 " +"占싯삼옙占쏙옙占쏙옙 receiver占쏙옙占쏙옙" +mRandom[i] + "==" + receiver);
					str = "IN-" + sender + "-" + receiver;
					System.out.println("占쌓쏙옙트8-3 "+ str);
					System.out.println("占쌓쏙옙트8-4 "+ fCnt);
					for(int j=0; j<tCnt; j++) { //占싸듸옙占쏙옙 占쏙옙占쏙옙 占쌩븝옙 占싫듸옙
						if(totalId.elementAt(j).equals(sender)) { 
							System.out.println("占쌓쏙옙트8-5" + str + "占싸듸옙占쏙옙" +j);
							broad_cast(str, j);
						}
					}
				}
				
				roomCnt = match;
				
				str = "IN-" + sender + "-" + receiver; //占쌨댐옙 占쏙옙占� 
				receive = str.split("-");
			}
			
			//占쏙옙占쏙옙占쏙옙 占쏙옙占썸에占쏙옙 占싯몌옙
			if(receive[0].equals("end")) {
				String endId = receive[1];
				String endMatchId = null;
				
				System.out.println("占쌓쏙옙트9-0" + str);
				
				for(int i=match-1; i>=0; i--) {
					if(mIdSearch.get(i).equals(endId)) {
						 System.out.println("占쌓쏙옙트 9-1-1 " + mIdSearch.get(i));
						 System.out.println("占쌓쏙옙트777 占싱띰옙占쏙옙 i占쏙옙占쏙옙" + i);
						 endMatchId = fIdSearch.get(i);
						 fIdSearch.set(i, "");
						 mIdSearch.set(i, "");
						 break;
					 }
					 
					else if(fIdSearch.get(i).equals(endId)) {
						 System.out.println("占쌓쏙옙트 9-1-2 " + fIdSearch.get(i));
						 System.out.println("占쌓쏙옙트888 占싱띰옙占쏙옙 i占쏙옙占쏙옙" + i);
						 endMatchId = mIdSearch.get(i);
						 mIdSearch.set(i, "");
						 fIdSearch.set(i, ""); 
						 break;
					 }
				}
				System.out.println("占쌓쏙옙트9-2" + "占쏙옙占쏙옙占쏙옙占� = "+ endId + "占쏙옙占쏙옙占쏙옙占쏙옙 占쏙옙占�" + endMatchId);
				
				str = "OUT-" + endMatchId;
				for(int j=0; j<tCnt; j++) {
					if(totalId.elementAt(j).equals(endMatchId)) { 
						System.out.println("占쌓쏙옙트9-3 " + str + "占싸듸옙占쏙옙" +j);
						broad_cast(str, j);
					}
				}
			}
			
			//占쌨쏙옙占쏙옙 占쏙옙占쏙옙占승곤옙
			if (receive[0].equals("to")) {
				str = receive[3];
				
				for(int i=0; i<tCnt; i++) {
					System.out.println("占쌓쏙옙트10" + "占쏙옙占쏙옙占승삼옙占� " + receive[1] + "占쌨는삼옙占� " + receive[2] + receive[3] );
					for(int j=0; j<tCnt; j++) {
						if (totalId.elementAt(i).equals(receive[1])){
							if (totalId.elementAt(j).equals(receive[2])) {
								myIndex = i;  //myIndex占쏙옙 totalId占쏙옙 占쏙옙占쏙옙占� 占쏙옙占쏙옙 占쏙옙占싱듸옙 占싸듸옙占쏙옙
								yourIndex = j; //yourIndex占쏙옙 totalId占쏙옙 占쏙옙占쏙옙占� 占쏙옙占쏙옙占쏙옙 占쏙옙占싱듸옙 占싸듸옙占쏙옙
							} 
						}
					}
				}
			
				broad_cast("I-"+str, myIndex);
				broad_cast("YOU-"+str, yourIndex);
			}
		}
		
		public void broad_cast(String str, int index) {
			/*for (int i = 0; i < user_vc.size(); i++) {*/

				/* UserInfo imsi = (UserInfo) user_vc.elementAt(i); */
				UserInfo imsi = (UserInfo) user_vc.elementAt(index);
				imsi.send_Message(str);
			/*}*/
		}

		public void send_Message(String str) {
			try {
				// dos.writeUTF(str);
				byte[] bb;
				bb = str.getBytes();
				dos.write(bb); // .writeUTF(str);
			} catch (IOException e) {
				textArea.append("占쌨쏙옙占쏙옙 占쌜쏙옙 占쏙옙占쏙옙 占쌩삼옙\n");
				textArea.setCaretPosition(textArea.getText().length());
			}
		}

		public void run() // 占쏙옙占쏙옙占쏙옙 占쏙옙占쏙옙
		{
			while (true) {
				try {

					// 占쏙옙占쏙옙悶占쏙옙占� 占쌨댐옙 占쌨쇽옙占쏙옙
					byte[] b = new byte[1024];
					dis.read(b);
					String msg = new String(b);
					msg = msg.trim();
					// String msg = dis.readUTF();
					InMessage(msg);

				} catch (IOException e) {

					try {
						dos.close();
						dis.close();
						user_socket.close();
						vc.removeElement(this); // 占쏙옙占쏙옙占쏙옙占쏙옙 占쏙옙占쏙옙 占쏙옙체占쏙옙 占쏙옙占싶울옙占쏙옙 占쏙옙占쏙옙占�
						textArea.append(vc.size() + " : 占쏙옙占쏙옙 占쏙옙占싶울옙 占쏙옙占쏙옙占� 占쏙옙占쏙옙占� 占쏙옙\n");
						textArea.append("占쏙옙占쏙옙占� 占쏙옙占쏙옙 占쏙옙占쏙옙占쏙옙 占쌘울옙 占쌥놂옙\n");
						textArea.setCaretPosition(textArea.getText().length());

						break;

					} catch (Exception ee) {

					} // catch占쏙옙 占쏙옙
				} // 占쌕깍옙 catch占쏙옙占쏙옙
					
			}

		}// run占쌨소듸옙 占쏙옙

	} // 占쏙옙占쏙옙 userinfo클占쏙옙占쏙옙占쏙옙

}